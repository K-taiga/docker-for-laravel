# ワークフロー
name: deploy

# ワークフローの処理のきっかけ
on:
  push:
    branches:
    - main
    - feature/push_images_to_ecr
env:
  AWS_REGION: ap-northeast-1
  # githubのワークフローのコミットSHAをimageタグに利用
  IMAGE_TAG: ${{ github.sha }}
  SYSTEM_NAME: example
  SERVICE_NAME: laravel-fargate-app

# ジョブ
jobs:
  deploy:
    name: Deploy app to AWS Fargate
    # ジョブの環境
    runs-on: ubuntu-latest

    # ジョブのステップ
    steps:
      - name: Configure aws credentials for prod
        # if: github.ref == 'refs/head/main'
        # 使用するアクション名 = GitHub Actions用に用意された処理のまとまり
        # aws-actions/configure-aws-credentials@v1 = AWS CLIを以下の認証情報で実行
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # assumeするIAMロール
          role-to-assume: ${{ secrets.PROD_AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800
      - name: Set env vars for prod
        # if: github.ref == 'refs/head/main'
        # Github Actions使用する環境変数を設定
        run: echo "ENV_NAME=prod" >> $GITHUB_ENV
      # Github Actionsの環境にlaravel-fargate-appのコードをクローンしてくる
      - uses: actions/checkout@v2
      - run: docker-compose up -d --build app web
      # 毎回同じパッケージをインストールするのはムダなので変更がなければcacheを使うようにする
      - name: Cache composer
        id: cache-composer
        uses: actions/cache@v2
        with:
          path: backend/vendor
          key: composer-v1-${{ hashFiles('backend/composer.lock')}}
      # Github Actionsにはttyがないため-Tでttyを無効にする
      # -n で質問の回答を無効化
      # --no-devで本番用のパッケージのみインストール
      - run: docker-compose exec -T app composer install -n --prefer-dist --no-dev
        if: ${{ !steps.cache-composer.outputs.cache-hit }}
      # nodeのパッケージのキャッシュ
      - name: Cache npm
        id: cache-npm-ci
        uses: actions/cache@v2
        with:
          path: backend/node_modules
          key: npm-v1-${{ hashFiles('backend/package-lock.json')}}
      # npm ciはnpm installとほぼ同じだがpackage-lock.jsonを更新しない
      - run: docker-compose exec -T web npm ci
        if: ${{ !steps.cache-npm-ci.outputs.cache-hit }}
      # jsのコンパイル
      - run: docker-compose exec -T web npm run prod
      # ECRへのログイン
      - uses: aws-actions/amazon-ecr-login@v1
        id: amazon-ecr-login
      - name: Push nginx image to ecr
        env:
          DOCKER_BUILDKIT: 1
          # aws-actions/amazon-ecr-loginのoutputであるregistryから"AWSのアカウントID.dkr.ecr.ap-northeast-1.amazonaws.com"を取得
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          # example-prod-laravel-fargate-app-nginxのecrにpush
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-nginx
        # --cache-fromでnginxの最新イメージがあればそれを元にbuildすることで時間の短縮をする
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
            -f infra/docker/nginx/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Push php image to ecr
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-php
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
            -f infra/docker/php/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
